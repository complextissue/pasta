```{r}
#| include: false
library(spatialFDA)
```

{{< include theory/01-theory-point.qmd >}}

# Multitype point process

```{r}
sub <- spe[, spe$sample_id == "0.01"]
(pp <- .ppp(sub, marks = "cluster_id"))
```

## Multitype and Multivariate viewpoint

A pattern with multiple type of points, e.g. cell types, can be seen in different ways. One the one hand, the **multitype approach** assumes that the points $x$ were recorded together with with their labels $m$ and that they were generated at the same time. The locations and labels therefore have a joint distribution $P(X,M)$. On the other hand one can assume that the pattern with multiple types of points is a combination of several distinct point patterns, one for each type of point. This is the **multivariate approach** and the different point patterns $A$ and $B$ form a joint distribution $P(A,B)$. To test if the labels depend on the location one can assume the following null hypotheses [@baddeleySpatialPointPatterns2015, pp. 565-567]:

- complete spatial randomness and independence (CSRI): the points are distributed at random; the type of each points is randomly allocated; independence between points of different types; allocation of the types independently of the other points and of its location.
- random labeling: each point is assigned a type at random independently of its location
- independence of components:  the points of different types are independent of each other.

Apart from CSRI is is also important for the analysis if we can assume stationarity, i.e. the statistical properties of the point pattern do not change in the window.

For simplicity, we will focus on three cell types of our point pattern: Ependymal, OD Mature and Microglia.
<!-- This is appropriate if we assume that the point processes are independent. We could also assume that they come from the same process. In this case we have to check the stationarity assumption of the pattern. -->

```{r}
marks(pp) <- factor(marks(pp))
selection <- c('OD Mature', 'Ependymal', 'Microglia')
fov_sel <- c('0.01')

pp_sel <-  subset(pp, marks %in% selection, drop = TRUE)
spe_sel <- spe[, spe$sample_id == "0.01" &  spe$cluster_id %in% selection]
```

We select on fov, which corresponds to one cut in the frontal plane.

```{r}
#| fig-width: 7.5
#| fig-height: 7.5
pp_sel |> as.data.frame() |> 
  ggplot(aes(x = x, y = y, color = marks)) +
  geom_point() +
  theme_minimal() +
  coord_fixed() +
  scale_color_brewer(palette = "Set1")
```

The summary of `pp` (point pattern) object returns general properties, plus intensities, combined and per mark type.

```{r}
summary(pp)
```

To get the overall intensity the individual intensities can be summed up. Assuming that the the multitype process is first order stationary (i.e. each sub-process is stationary) the individual intensities sum up to the intensity of the unmarked point process [@baddeleySpatialPointPatterns2015, pp. 574ff.].

```{r}
sum(intensity(pp)) == intensity(unmark(pp))
```

The stationarity assumption is not appropriate in all cases. To assess first-order stationarity visually, we can plot the kernel density estimates per type.

```{r}
#| fig-width: 15
#| fig-height: 7.5
ppls <- split(pp_sel) # split by mark
plot(density(ppls))
```

Ependymal and OD Mature cells are cleary inhomogeneous, while for Microglia cells it is not so clear and we could assume homogeneity, especially because the window is larger than the tissue and there is a tissue border in the bottom middle.

To further inverstiagte the spatial arrangement of the different cell types we can calculate the relative risk, i.e., the probability of observing a given celltype at a given location. It is calculated using the function `relrisk`. The bandwidth for smoothing is calculated with `bw.relrisk` and might need to be adjusted [@baddeleySpatialPointPatterns2015, pp. 577-583].

```{r}
#| fig-width: 7
#| fig-height: 7
#| eval: false
#| include: false
rp <- relrisk(pp_sel,se=TRUE)
plot(rp$estimate, zlim = c(0, max(rp$estimate)))
```

```{r}
#| eval: false
#| include: false
im_sum <- im.apply(rp$estimate,sum)
im_sum <- signif(im_sum,9)
all(im_sum==1)
```

The `relrisk` function further gives us the dominant mark for different regions of the tissue of interest. This could be interesting in the annotation of spatial domains. It indicates at each location, which cell type is most likely to occur. 

```{r}
#| fig-width: 5
#| fig-height: 5
rpd <- relrisk(pp_sel, diggle = TRUE)
dom <- im.apply(rpd, which.max)
dom <- eval.im(factor(dom, levels = seq_along(levels(unique(marks(pp_sel)))),
                      labels = levels(unique(marks(pp_sel)))))
plot(dom,las=2,main="Dominant mark")
```

# Correlation and spacing

## Nearest neighbourhood contingency

To further investigate the spatial distribution of the marks we can investigate the nearest neighbourhood of each cell type. One possibility is to work with nearest neighborhood contingency tables developed by [@dixonNearestneighborContingencyTable2002]. The statistical tests are implemented in the R package `dixon` [@delacruzMetodosParaAnalizar2008]. 

The measure of segregation $S$ is defined in [@dixonNearestneighborContingencyTable2002] as 

$$S_{i,j}= \frac{\log[(N_{i,j}/(N_i−N_{i,j})]}{[(N_i−1)/(N−N_i)]}$$
where $N_i$ is the number of individuals $i$, $N_{i,j}$ is the number of individuals of type $i$ with a nearest neighbor of type $j$, and $N$ is the total number of individuals. 

A value of $S=0$ is consistent with random labeling. A value larger than 0 indicates that the two types are more segregated than expected by chance, the larger the value the more segregated. Note that segregated means that it is more likely to expect a neigbour of type $j$ than by chance. In the case that the neigbour is of the same type this is equivalent to "attraction" of the types. On the other hand if $S<0$ it indicates that type $j$ is less likely to be a neigbour than by chance. The P-values are calculated using expected numbers of nearest neighbors under the null hypothesis of random labeling using a Monte-Carlo simulation and assumes an asymptotic $\chi^2$ distribution.


```{r}
#| echo: true
#| message: false
out <- dixon(as.data.frame(pp_sel), nsim = 99)
out$tablaZ %>% 
  arrange(desc(abs(`Z `))) %>%
  select(-`  p-val.Nobs`)
```

In this table we see that most Ependymal cells are very clustered, while Microglia are more evenly distributed. Further we see that it is less likely to find a Ependymal cells next to a OD mature cells than by chance. 

OD Mature cells show this interesting characteristic that they are clustered in some parts of the tissue and more evenly distributed in other parts of the tissue. This characteristic is not visible in the table. The statistic also considers only the nearest neighbour and ignores neighbours that are further away. 

## Summary functions for pairs of types

Similar to the simple case without marks, it is possible to estimate summary functions. In particular, summary functions *between* different marks can be calculated. Note that the canonical functions assume that the multi-type process is stationary.

### Cross K-function

The cross K-function is a summary function that measures the average number of points of type `j` within a distance `r` of a point of type `i`. The formula is given by: 

$$
K(r) = \frac{1}{\lambda_j} \mathbb{E} [t(u,r,X^{j})|u \in X^{i}],
$$

where $X^{i}$ is the point pattern of type $i$ and $t(u,r,X^{j})$ is the number of points of type $j$ in a circle of radius $r$ around $u$ [@baddeleySpatialPointPatterns2015, pp. 594-595]. It is important to remember that the homogeneous cross K-function assumes that the multitype process is stationary. If this is not the case, there is a risk in misinterpreting the results. The problem is the confounding between clustering and inhomogeneity, c.f. [@baddeleySpatialPointPatterns2015, pp. 151-152] 

First, we plot an overview over the cross K function for the different types. As we have seen before the assumption of stationarity might be not valid. We will therefore use the inhomogeneous version of the cross K function.

```{r}
#| fig-width: 15
#| fig-height: 10

resCross <- calcCrossMetricPerFov(
  spe,
  selection = c("OD Mature", "Ependymal", "Microglia"),
  subsetby = 'sample_id',
  fun = 'Kcross.inhom',
  marks = 'cluster_id',
  r_seq = seq(0, 500, length.out = 100),
  by = c('Animal_ID', 'sample_id')
)

resCross <- subset(resCross, sample_id %in% fov_sel)
plotCrossMetricPerFov(resCross, theo = TRUE, correction = "iso", x = "r", image_id = 'sample_id')
```

<!-- [MR: given that these plots are somewhat redundant .. like, the upper diagonal is basically the same as the lower diagonal, maybe it's worth having a more compact representation, e.g., one plot for each cell type, with multiple lines plotted? Also, doesn't the Ependymal-Ependymal function appear to be less than the CSR line? Is that the opposite of what we've seen before?] -->

The diagonal of the inhomogeneous cross K-function plot shows the K-function for the different marks (indication of Poisson or non-Poisson point processes). Off-diagonal panels give indication of independence of points when the number of points follows the expected K-function but does not imply that the individual marks follow a Poisson process. If the processes of the types are independent, we assume that they are also uncorrelated.

In the example above, assuming that the process is inhomogeneous, the Ependymals cells appear to be regularly spaced, which seems counter intuitive. However, this is the result of the pattern being inhomogeneous with spatially varying intensity. When accounting for this, the pattern is more regular than expected under an inhomogeneous point process. The estimation of the inhomogeneous cross functions is not straightforward and results change based on the estimation of the local intensity and the edge correction, c.f. [@baddeleySpatialPointPatterns2015, p. 605].

Let's focus a bit more on the relationship between Ependymal and the other two cell types. We will also calculate confidence intervals for the different cross K-functions. We have already seen that our dataset most likely does not satisfy the assumption of stationarity. For this reason, we will calculate the inhomogeneous cross K-function. Note that the option to calculate confidence intervals is not yet implemented in `spatialFDA`.

```{r}
#| include: true
#| eval: true
#| echo: false
#| message: false
#| results: hide
plotCrossMetric <- function(ppp, fun, from, to, edgecorr){
  lce <- lohboot(ppp, fun, from = from, to = to)
  p <- ggplot(lce, aes(x = r, y = .data[[edgecorr]])) +
    geom_line(size = 1) +
    geom_ribbon(aes(ymin = lo, ymax = hi), alpha = 0.25)+
    geom_line(aes(x = r, y = theo), linetype = "dotted", size = 1) +
    geom_line() +
    labs(title = attributes(lce)$yexp) +
    theme_minimal()
  return(p)
}

p_epen_od <- plotCrossMetric(pp_sel, "Kcross.inhom", 
                             "Ependymal", "OD Mature", "iso")
p_epend_micro <- plotCrossMetric(pp_sel, "Kcross.inhom", 
                                 "Ependymal", "Microglia", "iso")

```

```{r}
#| include: true
#| eval: true
#| echo: false
#| fig-width: 7.5
#| fig-height: 5
p_epen_od + p_epend_micro
```

Remember that the dashed line represents the assumption of a multitype Poisson process. If the line lies above the dotted line, there is indication of attraction while if the line is below the dotted line there is indication of repulsion. In the plot above we can see that there is indication of attraction between Ependymal and OD Mature cells while there is indication of repulsion between Ependymal and Microglia cells.

### Cross L-function 
Alternatively the L cross function with similar interpretation can be calculated using the `Lcross` function [@baddeleySpatialPointPatterns2015, pp. 596ff].

```{r}
#| fig-width: 15
#| fig-height: 10

resCross <- calcCrossMetricPerFov(
  spe,
  selection = c("OD Mature", "Ependymal", "Microglia"),
  subsetby = 'sample_id',
  fun = 'Lcross.inhom',
  marks = 'cluster_id',
  r_seq = seq(0, 500, length.out = 100),
  by = c('Animal_ID', 'sample_id')
)

resCross <- subset(resCross, sample_id %in% fov_sel)
plotCrossMetricPerFov(resCross, theo = TRUE, correction = "iso", x = "r", image_id = 'sample_id')
```
```{r}
#| include: false
#| eval: false
#| echo: true
#| message: false
#| results: hide
plotCrossAll <- function(ppp, fun, edgecorr){
  nMarks <- length(unique(marks(ppp)))
  Fall <- alltypes(ppp, fun)
  
  # Create a list of ggplot objects using lapply
  plot_list <- lapply(Fall[["fns"]], function(res) {
    ggplot(res, aes(x = r, y = .data[[edgecorr]])) +
      geom_line(linewidth = 1) +
      geom_line(aes(x = r, y = theo), 
                linetype = "dotted", linewidth = 1) +
      geom_line() +
      labs(title = attributes(res)$yexp) +
      theme_minimal()
  })
  
  p <- wrap_plots(plot_list, ncol = nMarks) + 
    plot_layout(guides = "collect") & theme(legend.position='bottom')
  return(p)
}
```

### Mark connection function

The mark connection function is the cross pair-correlation function, i.e. the generalization of the pair correlation function to a multitype point processes, divided by the unmarked pair-correlation function. It can be interpreted as the conditional probability that two points a distance $r$ apart have labels of type $i$ and of type $j$, given the presence of those points [@baddeleySpatialPointPatterns2015, pp. 596-597]. 

```{r}
#| fig-width: 15
#| fig-height: 10
#| eval: false
#| inculde: false
plotCrossAll(pp_sel, "markconnect", "iso") + 
  scale_y_continuous(limits = c(0, 1))
```


```{r}
#| fig-width: 15
#| fig-height: 10

resCross <- calcCrossMetricPerFov(
  spe = spe_sel,
  selection = c("OD Mature", "Ependymal", "Microglia"),
  subsetby = 'sample_id',
  fun = 'markconnect',
  marks = 'cluster_id',
  r_seq = seq(0, 500, length.out = 100),
  by = c('Animal_ID', 'sample_id')
)

#resCross <- subset(resCross, sample_id %in% fov_sel)
plotCrossMetricPerFov(resCross, theo = TRUE, correction = "iso", x = "r", image_id = 'sample_id')
```


<!-- [MR: wondering .. should these above all be put on the same scale? And, same question as above. Could we think about a more compact representation?] -->

The dashed lines indicate expected values under random labeling. The values measure dependence (or association) between the different labelled points. Positive values indicate that nearby points are more likely to have different types than expected by chance. This positive association between different cell types does not necessarily imply dependence, as it could be influenced by a negative association between cells of the same type, as it it could be the case for the Microglia cells. Furthermore, as the calculation is based on the $K$ function, the mark connection function assumes homogenity.

### Cross F-function (empty space function), cross G-function (Nearest-neighbor function) and cross J-function

The cross F-function is the cumulative distribution function of the distance from a location to the nearest point of the same type. For each type $i$, it is defined as:

$$F_i(r) = \mathbb{P}\{d(u,X^{i}\leq r\}.$$

The cross G-function is the cumulative distribution function of the distance from a location to the nearest point of another type and is defined as:

$$G_{ij}(r) = \mathbb{P}\{d(x,X^{(j)} \setminus u \leq r \mid X^{(i)} \ \text{has a point at u}).$$

If the points are independent of each other, the G and F function are identical. Both assume that the process is stationary. There are inhomogenous alternatives, in case the intensity is varying. Then we only assume correlation stationarity.

There exists a difference in the interpretation of the theoretical values of the K-cross and the G-cross function. For the K-cross, the theoretical value indicates independence between marks while for the G-cross the theoretical value is consistent with the assumption that the points of type `j` are Poisson in addition to being independent of the points of type $i$ [@baddeleySpatialPointPatterns2015, p. 597 ff].

The cross J-function is defined as:

$$J_{ij}(r) = \frac{1-G_{ij}(r)}{1-F_{j}(r)}$$

and summarizes the interpoint dependence between type $i$ and $j$. Under the hypothesis of independent components, i.e., that the point processes of each type are independent, the G-function is equivalent to the F-function and the J-function is equal to 1 [@baddeleySpatialPointPatterns2015, p. 597 ff]. 

<!-- ### Cross J-function  -->

<!-- The value of 1 is consistent with CSR and independence between different points. -->

<!-- ```{r} -->
<!-- #| fig-width: 10 -->
<!-- #| fig-height: 10 -->
<!-- jc <- alltypes(pp_sel, Jcross) -->
<!-- plot(jc) -->
<!-- ``` -->

### Dot functions

For each K-, G- and J- function, there also exist *dot* functions, which measure distances from points of one type to points of any type. These functions allow us to measure the dependence of one mark with all other marks at once.  For expample, the K-dot function represents the expected number of an other point within distance $r$ of a typical point of type $i$ [@baddeleySpatialPointPatterns2015, p. 600 ff]. 

```{r}
#| eval: false
#| inculde: false
#| fig-width: 8
#| fig-height: 4
plotCrossAll(pp_sel, "Kdot.inhom", "iso")
```


```{r}
#| fig-width: 7.5
#| fig-height: 5

resCross <- calcCrossMetricPerFov(
  spe,
  selection = c("OD Mature", "Ependymal", "Microglia"),
  subsetby = 'sample_id',
  fun = 'Kdot',
  marks = 'cluster_id',
  r_seq = seq(0, 500, length.out = 100),
  by = c('Animal_ID', 'sample_id')
)

resCross <- subset(resCross, sample_id %in% fov_sel)
plotMetricPerFov(resCross, theo = TRUE, correction = "iso", x = "r", image_id = 'sample_id', ID = "ID")
```

The dot functions are useful summary statistics to analyse the dependence of one mark with all other marks. 

## Summary function within and between types

In our original dataset, we have a large number of different marks. We picked three: OD mature, Ependymal and Microglia for illustrative purposes. An alternative to looking at all cross summary function combinations, it is possible to compare between and within types [@baddeleySpatialPointPatterns2015].

### Mark equality function

The Mark or Type Equality function for a stationary multitype point process measures the correlation between types of two points separated by distance r. It is the sum of the mark connection function of all pairs of points of the same type.

If k < 1, points at distance r are less likely than expected to be of the same type. If > 1, they are more likely to be of the same type. The value 1 indicates a lack of correlation [@baddeleySpatialPointPatterns2015, p. 603 ff].

```{r}
resCross <- calcMetricPerFov(
  spe,
  selection = c("OD Mature", "Ependymal", "Microglia"),
  subsetby = 'sample_id',
  fun = 'markcorr',
  marks = 'cluster_id',
  r_seq = seq(0, 500, length.out = 100),
  by = c('Animal_ID', 'sample_id')
)

resCross <- subset(resCross, sample_id %in% fov_sel)
plotMetricPerFov(resCross, theo = TRUE, correction = "iso", x = "r", image_id = 'sample_id')
```


```{r}
#| include: false
#| eval: false
#| inculde: false
#| fig-width: 5
#| fig-height: 5
plotMarkCorr <- function(pp, edgecorr = "iso") {
    me <- markcorr(pp)
    ggplot(me, aes(x = r, y = .data[[edgecorr]])) +
        geom_line(size = 1) +
        geom_line(aes(x = r, y = theo), linetype = "dotted", size = 1) +
        geom_line() +
        labs(title = attributes(me)$yexp) +
        theme_minimal()
}

plotMarkCorr(pp_sel)
```

We can see that in our dataset that it the more likely it is to find points of the same type at shorter distances. The curve never crosses the dashed line at 1, which means that it is generally more likely to find points of the same type at any distance than expected by chance.

<!-- ### I-function  -->

<!-- ```{r} -->
<!-- #| fig-width: 10 -->
<!-- #| fig-height: 10 -->
<!-- ic <- Iest(pp_sel) -->
<!-- plot(ic) -->
<!-- ``` -->

<!-- ## Summary functions for non stationary processes -->

<!-- The cross and dot functions described above assume a underlying stationary point process. If this assumption is not given, the interpretation of the result might be incorrect. -->

<!-- The inhomogeneous equivalents of the described functions require the different intensities as inputs in `spatstat`. If they are not given the intensities are estimated using kernel smoothing.   -->

<!-- ### Inhomogeneous L-function -->
<!-- ```{r} -->
<!-- plot(Lcross.inhom(pp_sel, "Microglia", "OD Mature", sigma=bw.diggle(pp_sel))) -->
<!-- plot(Lcross.inhom(pp_sel, "Microglia", "OD Mature", sigma=bw.relrisk(pp_sel))) -->

<!-- Lcross.inhom(pp_sel, "Microglia", "OD Mature") %>% plot() -->
<!-- ``` -->

# Tests of randomness and independence

In a multitype point process, there are usually two interesting hypotheses: 

- random-labeling hypothesis: the allocation of labels to the points is random
- independent component hypothesis: there is independence between different type of points

If both statments are correct, the point pattern is considered to be complete spatially random and independent (CSRI), the marked analog to complete spatial randomness (CSR) [@baddeleySpatialPointPatterns2015, p. 605 ff].

## Testing random labelling

The random labeling test is most logical when the marks represents its status, which is not most appropriate assumption when considering cell types. Testing for random labeling can be done using permutation test, in which the labels are randomly permuted. Random labeling can be assumed if the permuted datasets are statistically equivalent to the original dataset [@baddeleySpatialPointPatterns2015, p. 609 ff].

## Testing the indepenence of components assumption

The i-to-j functions are useful to test the independence of different subprocesses. If the processes of type i and j are independent, then
$K_{ij} = \pi r^2, G_{ij}(r) = F_{j}(r),  J_{ij}(r) \equiv 1$. Alternatively, randomization tests can be used in which simulated patterns from the dataset are generated and randomly split into subpatterns. These are then compared to the null hypothesis in which all subpatterns should be statistically equivalent to the original. However, this approach assumes stationarity and there is a need to handle edge effects [@baddeleySpatialPointPatterns2015, p. 606 ff].

```{r}
#| include: false
#| eval: false
#| echo: true
#| message: false
#| results: hide

plotEnvCross <- function(pp, i, j, fun, nsim = 39, radius = 150, global = FALSE){
  pp_scaled <- rescale(pp)
  E1 <- envelope(pp_scaled, fun, nsim=nsim, i=i, j=j,
                 simulate=expression(rshift(pp_scaled, radius = radius)), global = global)
  p <- ggplot(E1, aes(x = r, y = .data[["mmean"]])) +
    geom_line(size = 1) +
    geom_ribbon(aes(ymin = lo, ymax = hi), alpha = 0.25)+
    geom_line(aes(x = r, y = obs), linetype = "dotted", size = 1) +
    geom_line() +
    labs(title = attributes(E1)$yexp) +
    theme_minimal()
  return(p)
}

pEnv <- plotEnvCross(pp_sel, fun = "Kcross.inhom",
                     "Ependymal", "OD Mature", nsim = 39, radius = 150)
```

```{r}
#| include: false
#| eval: false
#| fig-width: 5
#| fig-height: 5
pEnv
```

```{r}
#| include: false
#| eval: false
#| fig-width: 5
#| fig-height: 5
plotEnvCross(pp_sel, fun = "Kcross.inhom",
             "Ependymal", "OD Mature", nsim = 39, radius = 150, global = TRUE)
```

<!-- We have indication that the independence-of-components assumption should not be rejected. Therefore, we conclude that Ependymal and OD Mature cells are independent. -->

# Assuming stationarity of the total pattern

As outlined above, the homogeneous cross correlation and spacing functions assume stationarity, whereas the inhomogeneous functions only assume correlation stationarity. First-order stationarity is not given in our dataset, when we look at the different patterns individually. However, using the total (unmarked) pattern, we could assume first-order stationarity, since the intensity is the same across the pattern.

```{r}
plot(density(unmark(pp)))
```

Let's look at the homogeneous cross K-function.


```{r}
#| fig-width: 15
#| fig-height: 10

resCross <- calcCrossMetricPerFov(
  spe,
  selection = c("OD Mature", "Ependymal", "Microglia"),
  subsetby = 'sample_id',
  fun = 'Kcross',
  marks = 'cluster_id',
  r_seq = seq(0, 500, length.out = 100),
  by = c('Animal_ID', 'sample_id')
)

resCross <- subset(resCross, sample_id %in% fov_sel)
plotCrossMetricPerFov(resCross, theo = TRUE, correction = "iso", x = "r", image_id = 'sample_id')
```

The result is different from the previous analysis. The Ependymal cells now appear to be clustered. This is because stationarity assumes that Ependymal cells could theoretically be present in the total observation window. If this assumption is justified, depends on the context and research question. The interpretation of the results should always be done with the assumption of stationarity or inhomogeneity in mind and should be reported in an analysis.

## Session info

```{r}
#| label: session-info
sessionInfo()
```
