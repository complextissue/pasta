---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Discrete Marks

## Dependencies

```{r}
#| label: load-libs
#| message: false
#| warning: false
#| results: hide
source("utils.R")
```

## Setup

```{r}
#| label: load-data 1
spe <- readRDS("../data/spe.rds")
```

# Multitype point process

```{r}
sub <- spe[, spe$sample_id == "0.01"]
(pp <- .ppp(sub, marks = "cluster_id"))
```


## Multitype and Multivariate viewpoint

A pattern with multiple types of points can be seen in different ways. One the one hand the *multitype approach* assumes that the points $x$ were recorded together with with their labels $m$ and we assume that they were generated at the same time The locations and labels therefore have a joint distribution $P(X,M)$. On the other hand one can assume that the pattern with multiple types of points is a combination of several distinct point patterns, one for each type of point. This is the *multivariate approach* and the different point patterns form a joint distribution $P(A,B)$. To test if the labels depend on the location one can assume the following null hypotheses [@baddeleySpatialPointPatterns, pp. 565-567]:

- complete spatial randomness and independence (CSRI): the points are distributed at random; the type of each points is randomly allocated; independence between points of different types; allocation of the types independently of the other points and of its location.
- random labeling: each point is assigned a type at random independently of its location
- independence of components that the points of different types are independent of each other.


The other important question is if we can assume stationarity, i.e., the distribution of the points is the same everywhere in the window.

For simplicity, we will focus on three cell types of our point pattern: Ependymal, OD Mature and Microglia. This is appropriate if we assume that the point processes are independent. We could also assume that they come from the same process. In this case we have to check the stationarity assumption of the total unmarked pattern.

```{r}
marks(pp) <- factor(marks(pp))
selection <- c('OD Mature', 'Ependymal', 'Microglia')

pp_sel <-  subset(pp, marks %in% selection, drop = TRUE)
```


```{r}
#| fig-width: 7.5
#| fig-height: 7.5
pp_sel |> as.data.frame() |> 
  ggplot(aes(x = x, y = y, color = marks)) +
  geom_point() +
  theme_minimal() +
  coord_fixed() +
  scale_color_brewer(palette = "Set1")

```

The summary of `pp` (point pattern) object returns general properties, plus intensities, combined and per mark type.

```{r}
summary(pp)
```

To get the overall intensity the individual intensities can be summed up. Assuming that the the multitype process is first order stationary (i.e. each sub-process is stationary) the individual intensities sum up to the intensity of the unmarked point process [@baddeleySpatialPointPatterns, pp. 574ff.].

```{r}
sum(intensity(pp)) == intensity(unmark(pp))
```

The stationarity assumption is not appropriate in all cases. To assess stationarity visually, we can plot the kernel density estimates per type.

```{r}
#| fig-width: 7.5
#| fig-height: 7.5
ppls <- split(pp_sel) # split by mark
plot(density(ppls))
```

Ependymal and OD Mature cells are cleary inhomogeneous, while for Microglia cells it is not so clear and we could assume homogeneity, especially as there are no cells in the bottom middle of the window.

<!-- If we plot all estimated intensities on the same scale, the low intensity of Microglia becomes more apparent. -->

<!-- ```{r} -->
<!-- #| fig-width: 10 -->
<!-- #| fig-height: 10 -->
<!-- plot(density(ppls), zlim = c(0, max(density(ppls)))) -->
<!-- ``` -->

<!-- [MR: just to be efficient on space, perhaps just show one of the density plots. But also, density was already discussed in the previous vignette. So, maybe we can also remove it?] -->

To further inverstiagte the spatial arrangement of the different cell types we can calculate the relative risk, i.e., the probability of observing a given celltype at a given location. It is calculated using the function `relrisk`. The bandwidth for smoothing is calculated with `bw.relrisk` and might need to be adjusted [@baddeleySpatialPointPatterns, pp. 577-583].

```{r}
#| fig-width: 7
#| fig-height: 7
#| eval: false
#| include: false
rp <- relrisk(pp_sel,se=TRUE)
plot(rp$estimate, zlim = c(0, max(rp$estimate)))
```

```{r}
#| eval: false
#| include: false
im_sum <- im.apply(rp$estimate,sum)
im_sum <- signif(im_sum,9)
all(im_sum==1)
```

The `relrisk` function further gives us the dominant mark for different regions of the tissue of interest. This could be interesting in the annotation of spatial domains. It indicates at each location, which cell type is most likely to occur. 

```{r}
#| fig-width: 10
#| fig-height: 10
#| eval: false
#| include: false
rpd <- relrisk(pp_sel, diggle = TRUE)
dom <- im.apply(rpd, which.max)
dom <- eval.im(factor(dom, levels = seq_along(levels(unique(marks(pp_sel)))),
                      labels = levels(unique(marks(pp_sel)))))
plot(dom,las=2,main="Dominant mark")
```

<!-- # Random labeling -->

<!-- A test of segregation of marks can be performed with `segregation.test`. It is based on the assumption of random labeling and the computed test statistic measures the similarity of the distribution of marks. The randomization is done by permuting the marks of the points while keeping the locations constant [@baddeleySpatialPointPatterns]. -->

<!-- ```{r} -->
<!-- #| warning: false -->
<!-- segregation.test(pp,nsim=19) -->
<!-- ``` -->

<!-- In this case, there is clear indication that the labeling of marks is not random. For more about random labeling check the part in umarked about local scaling. -->

<!-- #TODO: shall we move this part to umarked as well, it goes together with the hotspot analysis -->

<!-- [MR: here same thing, we need a little bit of explanation of what this tells you .. it's basically that the points are non-randomly distributed? If so, it doesn't add that much maybe.] -->

 <!-- <!-- # Measures of spatial segregation -->

<!-- [SG: I leave them out for now, I'm not sure how much we gain from them. I think Dixon test is more informative] -->

<!-- The package `seg` implements different measures of spatial segregation, which quantify two distinct aspects [@osullivanSegMeasuringSpatial2019]. The first describes the evenness versus clustering, which is independent of the overall composition of a sample and describes the distribution of individuals. The second describes isolation versus exposure, which will depend on the composition and describes the degree to which different groups are isolated from or exposed to one another. -->

<!-- Spatial segregation measures developped by [@reardonMeasuresSpatialSegregation2004]. -->

<!-- The segregation measures, D, R and H, measure spatial evenness, while P measures the spatial exposure, as follows: -->

<!-- - The dissimilarity index (D) describes how different the composition of a local environment is [MR: should we define what a 'local environment' is? Is it like a quadrat?], on average, from the composition of the total population. It ranges from 0 to 1, where 0 indicates perfect integration, and 1 indicates complete segregation. -->
<!-- - Relative diversity (R) is a measure of how much less diverse each local environments is, on average, compared to the total population. It ranges from 0 to 1, where 0 indicates perfect integration, and 1 indicates complete segregation. -->
<!-- - The information theory index (H) is a measure of how much less diverse local environments are, on average, compared to the entire sample. It can be interpreted as a measure of the variation in diversity of each local environment. It ranges from 0 to 1, where 0 indicates no segregation, and 1 indicates maximum possible segregation, i.e., all subjects in each local environment belong to one group only. -->
<!-- - The spatial exposure index (P) of mark m to mark n represents the average percentage of mark n in the local environments of each member of group m; it ranges from 0 (no exposure) to 1 (maximal exposure). -->


<!-- ```{r} -->
<!-- # create an indicator matrix -->
<!-- mm <- model.matrix(~0 + marks(pp_sel)) -->
<!-- colnames(mm) <- gsub("marks(pp_sel)", "", -->
<!--                      colnames(mm), fixed = TRUE) -->

<!-- #[MR: slightly more compact representation above] -->

<!-- spseg(pp_sel, -->
<!--       data = mm, -->
<!--       smoothing = 'kernel') -->
<!-- ``` -->

<!-- How to interpret the spatial exposure index P? Let's look at the documentation of the function. -->

<!-- From `help(spseg)` -->

<!-- > The exposure/isolation index, P, is presented in a matrix form. The spatial exposure of group ‘m’ to group ‘n’ is located in the row ‘m’ and column ‘n’ of the matrix. The matrix is rarely symmetric in practice so the spatial exposure index should be interpreted with care. The spatial isolation index values are given in the diagonal cells of the matrix; cell value at (m, m) indicates the degree of spatial isolation for group ‘m’ for example. -->

<!-- [MR: I think we shouldn't just quote the docs .. we should write this in our own words. Can we write a bit about the context of these 3 cell types?] -->

<!-- ## Spatial Proximity -->

<!-- An index of Spatial Proximity, developed by [@whiteMeasurementSpatialSegregation1983] represents the degree of segregation. A value of 1 indicates evenness in the sample, and values greater than 1.0 indicate clustering. If the index value is smaller than one, it indicates an unusual form of segregation (i.e., some groups are closer to other groups). It compares the average distance between members of one group with that between all individuals, irrespective of group assignment. It may change depend on the definition of distance. -->

<!-- ```{r} -->
<!-- # Index of spatial proximity -->
<!-- paste0('Index of spatial proximity: ', -->
<!-- isp(pp_sel, -->
<!--     data = mm) %>% round(3))  -->
<!-- ``` -->

<!-- [MR: because it's just a number, we might need a comparative example. From the description above, it indicates clustering. But how to know what contributes to that? Both Ependymal and OD Mature contribute.] -->

# Correlation and spacing

<!-- ## Distances and nearest neighbors -->

<!-- Investigating the kth nearest neighbor distance between points for all combinations of marks can be done as follows: -->

<!-- ```{r} -->
<!-- d <- nndist(pp_sel, k = 2, by = marks(pp_sel)) -->
<!-- (a <- aggregate(d, by = list(from=marks(pp_sel)), min)) -->
<!-- ``` -->

<!-- Another option is to either use the `K` nearest neighbors or count the number of points of a given type with a distance closer than `R`. Both can be done with the function `marktable`, where the argument `R` stands for the neighborhood radius and `N` for number of neighbors. -->

<!-- ```{r} -->
<!-- mt <- marktable(pp_sel,N = 5,collapse = TRUE) -->
<!-- signif(mt/rowSums(mt),2) -->

<!-- mt <- marktable(pp_sel,R = 10,collapse = TRUE) -->
<!-- signif(mt/rowSums(mt),2) -->

<!-- ``` -->

<!-- Additionally the function `markstat` can be used to calculate more complicated expressions than just the sum. -->

<!-- ## Nearest neighbor correlations -->

<!-- A overall correlation between marks [MR: what is the interpretation of overall correlation b/w marks when marks are discrete? Or maybe I misunderstand what is meant by correlation here.] can be calculated with `nncorr`. It returns two values: `unnormalised`, which is the probability that a point and its nearest neighbor have the same type and `normalised`, which divides the unnormalised probability by the probability of random labeling. So a value close to 1 indicates random labeling. A value much less than 1 means neighboring point are often of the same type.  -->

<!-- ```{r} -->
<!-- nncorr(pp_sel) -->
<!-- ``` -->

<!-- [MR: is this multivariate?] -->

<!-- <!-- The R package `spdep` (https://cran.r-project.org/package=spdep) contains many functions to calculate statistics based on nearest neighbors. -->

## Nearest neighbourhood contingency

To further investigate the spatial distribution of the marks we can investigate the nearest neighbourhood of each cell type. One possibility is to work with nearest neighborhood contingency tables developed by [@dixonNearestneighborContingencyTable2002]. The statistical tests are implemented in the R package `dixon` [@delacruzMetodosParaAnalizar2008]. 

The measure of segregation is defined as 

$$S_{i,j}= \frac{\log[(N_{i,j}/(N_i−N_{i,j})]}{[(N_i−1)/(N−N_i)]}$$
where $N_i$ is the number of individuals $i$, $N_{i,j}$ is the number of individuals of type $i$ with a nearest neighbor of type $j$, and $N$ is the total number of individuals. 

A value of $S=0$ is consistent with random labeling. A value larger than 0 indicates that the two types are more segregated than expected by chance, the larger the value the more segregated. Note that segregated means that it is more likely to expect a neigbour of type $j$ than by chance. In the case that the neigbour is of the same type this is equivalent to "clustering". On the other hand if $S<0$ it indicates that type $j$ is less likely to be a neigbour than by chance. The P-values are calculated using expected numbers of nearest neighbors under the null hypothesis of random labeling using a Monte-Carlo simulation and assumes an asymptotic $\chi^2$ distribution.


```{r}
#| echo: true
#| message: false
out <- dixon(as.data.frame(pp_sel), nsim = 99)
out$tablaZ %>% 
  arrange(desc(abs(`Z `))) %>%
  select(-`  p-val.Nobs`)
```

In this table we see that most Ependymal cells are very clustered, while Microglia are more evenly distributed. Further we see that it is less likelt to find a Ependymal cells next to a OD mature cells than by chance. 

OD Mature cells show this interesting characteristic that they are clustered in some parts of the tissue and more evenly distributed in other parts of the structure. This characteristic is not visible in the table. The statistic also considers only the nearest neighbour and ignores neighbours that are further away. 

## Summary functions for pairs of types

Similar to the simple case without marks, it is possible to estimate summary functions. In particular, summary functions *between* different marks can be calculated. Note that the canonical functions assume that the multi-type process is stationary.

### Cross K-function

The cross K-function is a summary function that measures the average number of points of type `j` within a distance `r` of a point of type `i`. The formula is given by: 

$$
K(r) = \frac{1}{\lambda_j} \mathbb{E} [t(u,r,X^{j})|u \in X^{i}],
$$

where $X^{i}$ is the point pattern of type $i$ and $t(u,r,X^{j})$ is the number of points of type $j$ in a circle of radius $r$ around $u$ [@baddeleySpatialPointPatterns, pp. 594-595].

First, we plot an overview over the cross K function for the different types.

```{r}
#| echo: true
#| message: false
#| results: hide
plotCrossAll <- function(ppp, fun, edgecorr){
  Fall <- alltypes(ppp, fun)
  
  # Create a list of ggplot objects using lapply
  plot_list <- lapply(Fall[["fns"]], function(res) {
    ggplot(res, aes(x = r, y = .data[[edgecorr]])) +
      geom_line(linewidth = 1) +
      geom_line(aes(x = r, y = theo), 
                linetype = "dotted", linewidth = 1) +
      geom_line() +
      labs(title = attributes(res)$yexp) +
      theme_minimal()
  })
  
  p <- wrap_plots(plot_list, nrow = ceiling(length(plot_list)/3), ncol = 3) + 
    plot_layout(guides = "collect") & theme(legend.position='bottom')
  return(p)
}
```

```{r}
#| include: false
#| eval: false
plotCrossAll <- function(ppp, fun, edgecorr){
  Fall <- alltypes(ppp, fun)
  df.all <- data.frame()
  
  for (l in Fall[["fns"]]) {
    attr <- paste(attributes(l)$ylab[1])
    df <- data.frame(l)
    df$Function <- attr
    df$from <- strsplit(attr, split = '\"')[[1]][4]
    df.all <- rbind(df.all, df)
  }
  
  p <- ggplot(df.all, aes(x = r, y = iso, color = Function)) +
    geom_line(linewidth = 1) +
    geom_line(aes(x = r, y = theo), 
              linetype = "dotted", linewidth = 1, color = "black") +
    geom_line() +
    facet_wrap(~from) +
    theme_minimal() +
    scale_color_brewer(palette = "Set1")
  return(p)
}

```


```{r}  
#| fig-width: 15
#| fig-height: 10
plotCrossAll(pp_sel, "Kcross.inhom", "iso")
```

<!-- [MR: given that these plots are somewhat redundant .. like, the upper diagonal is basically the same as the lower diagonal, maybe it's worth having a more compact representation, e.g., one plot for each cell type, with multiple lines plotted? Also, doesn't the Ependymal-Ependymal function appear to be less than the CSR line? Is that the opposite of what we've seen before?] -->

The diagonal of the cross K-function plot shows the K-function for the different marks (indication of Poisson or non-Poisson point processes). Off-diagonal panels give indication of independence of points when the number of points follows the expected K-function but does not imply that the individual marks follow a Poisson process. If the types are independent, they are also uncorrelated.

It is important to remember that the cross K-function assumes that the multitype process is stationary. If this is not the case, there is a risk in misinterpreting the results. The problem is the confounding between clustering and inhomogeneity, c.f. [@baddeleySpatialPointPatterns, 5.7.4, pp. 151-152] . In the example above, assuming that the process is inhomogeneous, the Ependymals cells appear to be regularly spaces, which seems counter intuitive. However, this is the result of the pattern being inhomogneous with spatially varying intensity. When accounting for this, the pattern is more regular than expected under an inhomogeneous point process. Furhtermore, the estimation of the inhomogeneous cross functions is not straightforward and results change based on the estimation of the local intensity and the edge correction, c.f. [@baddeleySpatialPointPatterns, p. 605].

In this overview, we can see that there is indication that Microglia and OD Mature cells are independent of each other. The other types seem to be dependent on each other. Let's focus a bit more on the relationship between Ependymal and the other two cell types. We will also calculate confidence intervals for the different cross K-functions. We have already seen that our dataset most likely does not satisfy the assumption of stationarity. For this reason, we will calculate further calculate the inhomogeneous cross K-function.

```{r}
#| echo: true
#| message: false
#| results: hide
plotCrossMetric <- function(ppp, fun, from, to, edgecorr){
  lce <- lohboot(ppp, fun, from = from, to = to)
  p <- ggplot(lce, aes(x = r, y = .data[[edgecorr]])) +
    geom_line(size = 1) +
    geom_ribbon(aes(ymin = lo, ymax = hi), alpha = 0.25)+
    geom_line(aes(x = r, y = theo), linetype = "dotted", size = 1) +
    geom_line() +
    labs(title = attributes(lce)$yexp) +
    theme_minimal()
  return(p)
}

p_epen_od <- plotCrossMetric(pp_sel, "Kcross.inhom", 
                             "Ependymal", "OD Mature", "iso")
p_epend_micro <- plotCrossMetric(pp_sel, "Kcross.inhom", 
                                 "Ependymal", "Microglia", "iso")

```
```{r}
# fig-width: 10
# fig-height: 10
p_epen_od + p_epend_micro
```

Remember that the dashed line represents the assumption of a multitype Poisson process. If the line lies above the dotted line, there is indication of clustering while if the line is below the dotted line there is indication of repulsion. In the plot above we can see that there is indication of clustering between Ependymal and OD Mature cells while there is indication of repulsion between Ependymal and Microglia cells.

### Cross L-function 
Alternatively the L cross function with similar interpreation can be calculated using the `Lcross` function [@baddeleySpatialPointPatterns].

```{r}
#| echo: false
#| message: false
#| results: hide
p_epen_od <- plotCrossMetric(pp_sel, "Lcross.inhom", "Ependymal", "OD Mature", "iso")
p_epend_micro <- plotCrossMetric(pp_sel, "Lcross.inhom", "Ependymal", "Microglia", "iso")
```
```{r}
# fig-width: 10
# fig-height: 10
p_epen_od + p_epend_micro
```

<!-- ### Cross L-function: -->

<!-- Similiar to the the K-function, the cross L-function can be defined for all pairs of points. -->

<!-- ```{r} -->
<!-- #| fig-width: 10 -->
<!-- #| fig-height: 10 -->
<!-- lc <- alltypes(pp_sel, Lcross) -->
<!-- plot(lc, .-r~r) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| fig-width: 10 -->
<!-- #| fig-height: 10 -->
<!-- lce <- alltypes(pp_sel, Lcross, envelope = TRUE, nsim=9) -->
<!-- plot(lce, .-r~r) -->

<!-- ``` -->
<!-- - TODO: not sure why the off-diagonal are not perfectly symmetric -->

<!-- ```{r} -->

<!-- lce <- lohboot(pp_sel, 'Lcross', from = "OD Mature", to = "Ependymal") -->
<!-- lce -->

<!-- edgecorr <- 'iso' -->

<!-- ggplot(lce, aes(x = r, y = .data[[edgecorr]])) + -->
<!--     geom_line(size = 1) + -->
<!--     geom_ribbon(aes(ymin = lo, ymax = hi), alpha = 0.25)+ -->
<!--     geom_line(aes(x = r, y = theo), linetype = "dotted", size = 1) + -->
<!--     geom_line() + -->
<!--     labs(title = attributes(lce)$yexp) + -->
<!--     theme_minimal() -->
<!-- ``` -->


<!-- ### Cross pair-correlation function -->

<!-- The cross type pair correlation is a genaralization of the pair correlation function to multitype point processes.  -->


<!-- ```{r} -->
<!-- #| fig-width: 10 -->
<!-- #| fig-height: 10 -->
<!-- pcfc <- alltypes(pp_sel, pcfcross) -->
<!-- plot(pcfc) -->
<!-- ``` -->

### Mark connection function

The mark connection function is essentially the cross pair-correlation function, i.e. the generalization of the pair correlation function to multitype point processes, divided by the unmarked pair-correlation function. It can be interpreted as the conditional probability that two points a distance r apart have labels of type 1 and of type 2, given the presence of those points [@baddeleySpatialPointPatterns]. 

```{r}
#| fig-width: 15
#| fig-height: 10
plotCrossAll(pp_sel, "markconnect", "iso") + 
  scale_y_continuous(limits = c(0, 1))
```

<!-- [MR: wondering .. should these above all be put on the same scale? And, same question as above. Could we think about a more compact representation?] -->

The dashed lines indicate expected values under random labeling. The values measure dependence (or association) between the different labelled points. Positive values indicate that nearby points are more likely to have different types than expected by chance. This positive association between different cell types does not necessarily imply dependence, as it could be influenced by a negative association between cells of the same type, as it is the case for the Microglia cells.

### Cross F-function (empty space function), cross G-function (Nearest-neighbor function) and cross J-function

The cross F-function is the cumulative distribution function of the distance from a location to the nearest point of the same type. For each type $i$, it is defined as:

$$F_i(r) = \mathbb{P}\{d(u,X^{i}\leq r\}$$.

The cross G-function is the cumulative distribution function of the distance from a location to the nearest point of another type and is defined as:

$$G_{ij}(r) = \mathbb{P}\{d(x,X^{(j)} \setminus u \leq r \mid X^{(i)} \ \text{has a point at u})$$.

If the points are independent of each other, the G and F function are identical. Both assume that the process is stationary.

There exists a difference in the interpretation of the theoretical values of the K-cross and the G-cross function. For the K-cross, the theoretical value indicates independence between marks while for the G-cross the theoretical value is consistent with the assumption that the points of type `j` are Poisson in addition to being independent of the points of type $i$.

The cross J-function is defined as:

$$J_{ij}(r) = \frac{1-G_{ij}(r)}{1-F_{j}(r)}$$

and summarizes the interpoint dependence between type $i$ and $j$. Under the hypothesis of independent components, i.e., that the point processes of each type are independent, the G-function is equivalent to the F-function and the J-function is equal to 1 [@baddeleySpatialPointPatterns]. 

<!-- ### Cross J-function  -->

<!-- The value of 1 is consistent with CSR and independence between different points. -->

<!-- ```{r} -->
<!-- #| fig-width: 10 -->
<!-- #| fig-height: 10 -->
<!-- jc <- alltypes(pp_sel, Jcross) -->
<!-- plot(jc) -->
<!-- ``` -->

### Dot functions

For each K-, G- and J- function, there also exist *dot* functions, which measure distances from points of one type to points of any type. These functions allow us to measure the dependence of one mark with all other marks at once.  For expample, the K-dot function represents the expected number of an other point within distance $r$ of a typical point of type $i$ [@baddeleySpatialPointPatterns]. 

```{r}
#| fig-width: 8
#| fig-height: 4
plotCrossAll(pp_sel, "Kdot.inhom", "iso")
```

The dot functions are useful summary statistics to analyse the dependence of one mark with all other marks. 

## Summary function within and between types

In our original dataset, we have a large number of different marks. We picked three OD mature, Ependymal and Microglia for illustrative purposes. An alternative to looking at all cross summary function combinations, it is possible to compare between and within types [@baddeleySpatialPointPatterns].

### Mark equality function

The Mark or Type Equality function for a stationary multitype point process measures the correlation between types of two points separated by distance r. It is the sum of the mark connection function of all pairs of points of the same type.

If k < 1, points at distance r are less likely than expected to be of the same type. If > 1, they are more likely to be of the same type. The value 1 indicates a lack of correlation [@baddeleySpatialPointPatterns].

```{r}
#| fig-width: 5
#| fig-height: 5
plotMarkCorr <- function(pp, edgecorr = "iso") {
    me <- markcorr(pp)
    ggplot(me, aes(x = r, y = .data[[edgecorr]])) +
        geom_line(size = 1) +
        geom_line(aes(x = r, y = theo), linetype = "dotted", size = 1) +
        geom_line() +
        labs(title = attributes(me)$yexp) +
        theme_minimal()
}

plotMarkCorr(pp)
```

We can see that in our dataset that it the more likely it is to find points of the same type at shorter distances. The curve never crosses the dashed line at 1, which means that it is generally more likely to find points of the same type at any distance than expected by chance.

<!-- ### I-function  -->

<!-- ```{r} -->
<!-- #| fig-width: 10 -->
<!-- #| fig-height: 10 -->
<!-- ic <- Iest(pp_sel) -->
<!-- plot(ic) -->
<!-- ``` -->

<!-- ## Summary functions for non stationary processes -->

<!-- The cross and dot functions described above assume a underlying stationary point process. If this assumption is not given, the interpretation of the result might be incorrect. -->

<!-- The inhomogeneous equivalents of the described functions require the different intensities as inputs in `spatstat`. If they are not given the intensities are estimated using kernel smoothing.   -->

<!-- ### Inhomogeneous L-function -->
<!-- ```{r} -->
<!-- plot(Lcross.inhom(pp_sel, "Microglia", "OD Mature", sigma=bw.diggle(pp_sel))) -->
<!-- plot(Lcross.inhom(pp_sel, "Microglia", "OD Mature", sigma=bw.relrisk(pp_sel))) -->

<!-- Lcross.inhom(pp_sel, "Microglia", "OD Mature") %>% plot() -->
<!-- ``` -->

# Tests of randomness and independence

In a multitype point process, there are usually two interesting hypotheses: 

- random-labeling hypothesis: the allocation of labels to the points is random
- independent component hypothesis: there is independence between different type of points

If both statments are correct, the point pattern is considered to be complete spatially random and independent (CSRI), the marked analog to complete spatial randomness (CSR) [@baddeleySpatialPointPatterns].

## Testing random labelling

The random labeling test is most logical when the marks represents its status, which is not most appropriate assumption when considering cell types. Testing for random labeling can be done using permutation test, in which the labels are randomly permuted. Random labeling can be assumed if the permuted datasets are statistically equivalent to the original dataset [@baddeleySpatialPointPatterns].

## Testing the indepenence of components assumption

The i-to-j functions are useful to test the independence of different subprocesses. If the processes of type i and j are independent, then
$K_{ij} = \pi r^2, G_{ij}(r) = F_{j}(r),  J_{ij}(r) \equiv 1$. Alternatively, randomization tests can be used in which simulated patterns from the dataset are generated and randomly split into subpatterns. These are then compared to the null hypothesis in which all subpatterns should be statistically equivalent to the original. However, this approach assumes stationarity and there is a need to handle edge effects [@baddeleySpatialPointPatterns].

```{r}
#| echo: true
#| message: false
#| results: hide

plotEnvCross <- function(pp, i, j, fun, nsim = 39, radius = 150, global = FALSE){
  pp_scaled <- rescale(pp)
  E1 <- envelope(pp_scaled, fun, nsim=nsim, i=i, j=j,
                 simulate=expression(rshift(pp_scaled, radius = radius)), global = global)
  p <- ggplot(E1, aes(x = r, y = .data[["mmean"]])) +
    geom_line(size = 1) +
    geom_ribbon(aes(ymin = lo, ymax = hi), alpha = 0.25)+
    geom_line(aes(x = r, y = obs), linetype = "dotted", size = 1) +
    geom_line() +
    labs(title = attributes(E1)$yexp) +
    theme_minimal()
  return(p)
}

pEnv <- plotEnvCross(pp_sel, fun = "Kcross.inhom", 
                     "Ependymal", "OD Mature", nsim = 39, radius = 150)
```

```{r}
#| fig-width: 5
#| fig-height: 5
pEnv
```

```{r}
#| fig-width: 5
#| fig-height: 5
plotEnvCross(pp_sel, fun = "Kcross.inhom", 
             "Ependymal", "OD Mature", nsim = 39, radius = 150, global = TRUE)
```

We have indication that the independence-of-components assumption should not be rejected. Therefore, we assume that Ependymal and OD Mature cells are independent.

# Assuming stationarity of the total pattern

As outlined above, the cross correlation and spacing functions assume stationarity, which is not given in our dataset, when we look at the different patterns individually. However, using the total (unmarked) pattern, we could assume stationarity. 

```{r}
plot(density(unmark(pp)))
```

Let's look at the homogeneous cross K-function.

```{r}
#| fig-width: 15
#| fig-height: 10
plotCrossAll(pp_sel, "Kcross", "iso")
```

The result is different from the previous analysis. The Ependymal cells now appear to be clustered. This is because stationarity assumes that Ependymal cells could theoretically be present in the total observation window. If this assumption is justified, depends on the context and the interpretation of the results.

## Session info

```{r}
#| label: session-info
sessionInfo()
```
