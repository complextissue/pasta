# Preamble

## Dependencies

```{r}
#| label: load-libs
#| message: false
#| warning: false
#| results: hide
source("utils.R")
```

## Setup

```{r}
#| label: load-data
spe <- readRDS("../data/spe.rds")

#subset the data to only look at sample ID 0.01
sub <- spe[, spe$sample_id == 0.01]
(pp <- .ppp(sub, marks = "cluster_id"))

#split the multitype point process into several single type processes
#fist, set the marks of the point process to be factors
marks(pp) <- factor(marks(pp))
ppls <- split(pp)
```

If not otherwise indicated, all information was taken from Baddeley et al. - Spatial Point Patterns.

```{r, fig.width=12, fig.height=12}
#Plot the entire point process where the marks are overlayed
plot(unmark(pp), main = 'Point Pattern Unmarked')
#Plot the marks separately 
plot(ppls, main = 'Point Pattern Marks Seperated')
```

# Concepts and Definitions of Point Processes

## Point Process

```{r}

```

## Complete Spatial Randomness

Complete spatial randomness (CSR) is the null model of point patterns, being the result of a poisson process. A completely random process is characterised by two properties

### Homogeneity

Homogeneity means that the expected number of points falling into a given region $B$ is proportional to its area $|B|$ given a proportionality constant $\lambda$. The constant $\lambda$ is the intensity of the process, so the average number of points in a unit area.

$$
\mathbb{E}[X\cap B] = \lambda |B|
\label{eq:expected_number_points}
$$

### Independence

Independence means that in two regions $A$ and $B$ the number of points $n(X\cap A)$ and $n(X\cap B)$ are two independent random variables. That means the number of points in region $A$ does not affect the number of points in region $B$. The number of points follow a poisson distribution:

$$
\mathbb{P}[N=k] = e^{-\mu}\frac{\mu^k}{k!}\\
\label{eq:poisson_process}
$$

## Inhomogeneous Poisson Process

A poisson process that is spatially varying in its average density of points is called inhomogeneous. Here, the average density $\lambda(u)$ is a function of spatial location $u$. The expected number of points falling into a region $B$ is 

$$
\mu = \int_{B} \lambda(u)du 
\label{eq:expected_number_inhomogeneous}
$$

## Stationarity

"A point process is called stationary if, when we view the process through a window $W$, its statistical properties do not depend on the location of the window in two-dimensional space."

## Isotropy

A point process is called isotropic, if its statistical properties are invariant to rotations. A CSR process is both stationary and isotropic.

## Intensity

Intensity is the expected density of points per unit area, as seen above. It can be interpreted as the rate of occurrence or the abundance of events recorded. The intensity itself is called a first moment property - being related to the expected number of points.

### Estimating Intensity

The intensity can be estimated regardless of the type of the point pattern. In order to do so, we sum the individual intensities of the marks

```{r}
sum(intensity(pp))
```

else we can look at each mark individually

```{r}
intensity(pp)
```
#### Quadrat Counting

quadrat counting can again be performed for the entire picture

```{r, fig.width=12, fig.height=12}
Q5 <- quadratcount(pp, nx=5, ny=5)
plot(unmark(pp), main='Unmarked Point Pattern Quadrats')
plot(Q5, col='black', add=TRUE)
```

or for each type separately, treating each type as an unmarked process

```{r, fig.width=12, fig.height=12}
Q5sep <- quadratcount(ppls, nx=5, ny=5)
plot(Q5sep, main = 'Separated Marks Quadrats')
#plot(ppls, add=TRUE)
```

The quadrat counts can be tested against regularity. This can happen again in the unmarked pattern or in the separated types

```{r}
#unmarked process
quadrat.test(unmark(pp), 5, alternative="regular", method="MonteCarlo")

#separate marks
lapply(ppls, quadrat.test, 5, alternative="regular", method="MonteCarlo")
```
#### Kernel Estimation

```{r, fig.width=12, fig.height=12}
Dens <- density(pp)
plot(Dens, main = 'Kernel Density')
```

```{r, fig.width=12, fig.height=12}
Denssep <- density(ppls)
plot(Denssep, main = 'Kernel Density Separated Marks')
```

# Appendix

## Session info

```{r}
#| label: session-info
sessionInfo()
```
